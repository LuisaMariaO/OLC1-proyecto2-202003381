/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[5,21,22,23,24,25,26,28,34,36,37,38,39,42],$Vd=[1,33],$Ve=[1,42],$Vf=[8,19,27],$Vg=[1,47],$Vh=[1,46],$Vi=[1,48],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[8,30],$Vp=[1,69],$Vq=[1,68],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[8,30,45,46,47,48,49,50,51,52,53,54,55,56,57,58],$VE=[5,21,22,23,24,25,26,28,34,35,36,37,38,39,42],$VF=[8,30,46,47,48,49,50,51,52,53,54,55,56,57,58],$VG=[8,30,57,58],$VH=[8,30,46,47,48,51,52,53,54,55,56,57,58],$VI=[8,30,51,52,53,54,55,56,57,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,";":8,"ASIGNACION":9,"IF":10,"PRINT":11,"PRINTLN":12,"WHILE":13,"FOR":14,"DOWHILE":15,"INCREDECRE":16,"TIPO":17,"VARIABLES":18,"=":19,"EXPRESION":20,"id":21,"tint":22,"tdouble":23,"tboolean":24,"tchar":25,"tstring":26,",":27,"tif":28,"(":29,")":30,"BLOQUE":31,"ELSE":32,"{":33,"}":34,"telse":35,"tprint":36,"tprintln":37,"twhile":38,"tfor":39,"CONDICION":40,"ITERADOR":41,"tdo":42,"++":43,"--":44,"-":45,"+":46,"*":47,"/":48,"^":49,"%":50,"==":51,"!=":52,"<":53,"<=":54,">":55,">=":56,"&&":57,"||":58,"!":59,"L":60,"int":61,"double":62,"boolean":63,"char":64,"string":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",19:"=",21:"id",22:"tint",23:"tdouble",24:"tboolean",25:"tchar",26:"tstring",27:",",28:"tif",29:"(",30:")",33:"{",34:"}",35:"telse",36:"tprint",37:"tprintln",38:"twhile",39:"tfor",42:"tdo",43:"++",44:"--",45:"-",46:"+",47:"*",48:"/",49:"^",50:"%",51:"==",52:"!=",53:"<",54:"<=",55:">",56:">=",57:"&&",58:"||",59:"!",61:"int",62:"double",63:"boolean",64:"char",65:"string"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,2],[7,4],[9,3],[17,1],[17,1],[17,1],[17,1],[17,1],[18,3],[18,1],[10,6],[31,3],[31,2],[32,2],[32,2],[32,0],[11,5],[12,5],[13,5],[14,9],[40,1],[40,1],[41,1],[41,1],[15,7],[16,2],[16,2],[20,2],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4: case 5: case 12:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 33: case 34: case 35: case 36:
 this.$=$$[$0]; 
break;
case 13:
 this.$= new Declaracion($$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 14:
 this.$= new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 15:
this.$= new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 21:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 22:
 this.$ = [$$[$0]];             
break;
case 23:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 24:
 this.$ = new Statement($$[$0-1]         , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 25:
 this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 26: case 27:
 this.$ = $$[$0];   
break;
case 28:
 this.$ = null; 
break;
case 29:
 this.$ = new Print($$[$0-2]         , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 30:
 this.$ = new Println($$[$0-2]         , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 31:
 this.$ = new While($$[$0-2],$$[$0]        , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 32:
 this.$=new For($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );   
break;
case 37:
 this.$ = new DoWhile($$[$0-2],$$[$0-5]        , _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38: case 42:
 this.$= new IncreDecre(IncreDecreOption.INCREMENTO,$$[$0-1],_$[$0-1].first_line,_$[$0].first_column); 
break;
case 39: case 41:
 this.$= new IncreDecre(IncreDecreOption.DECREMENTO,$$[$0-1],_$[$0-1].first_line,_$[$0].first_column); 
break;
case 40:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.NEGACION,        _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.SUMA            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.RESTA            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MULTIPLICACION            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 46:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIVISION            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POTENCIA            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.IGUAL          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.DIFERENTE     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 51:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENOR         , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 52:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENORIGUAL     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 53:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYOR          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 54:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYORIGUAL , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 55:
 this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56:
 this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Logic($$[$0], $$[$0],LogicOption.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 58:
  this.$ = $$[$0]; 
break;
case 59:
  this.$ = new Literal($$[$0],                   Type.INTEGER , _$[$0].first_line, _$[$0].first_column); 
break;
case 60:
  this.$ = new Literal($$[$0],                   Type.DOUBLE , _$[$0].first_line, _$[$0].first_column); 
break;
case 61:
  this.$ = new Literal($$[$0],                   Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column); 
break;
case 62:
  this.$ = new Literal($$[$0],                   Type.CHAR , _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
  this.$ = new Literal($$[$0],                   Type.STRING , _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
  this.$ = new Access($$[$0],_$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,21:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb},{1:[3]},{5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,21:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb},o($Vc,[2,3]),{8:[1,28]},{8:[1,29]},o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),{8:[1,30]},{18:31,21:[1,32]},{19:$Vd,43:[1,34],44:[1,35]},{29:[1,36]},{29:[1,37]},{29:[1,38]},{29:[1,39]},{29:[1,40]},{31:41,33:$Ve},{21:[2,16]},{21:[2,17]},{21:[2,18]},{21:[2,19]},{21:[2,20]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,12]),{8:[2,13],19:[1,43],27:[1,44]},o($Vf,[2,22]),{20:45,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},o($Vo,[2,38]),o($Vo,[2,39]),{20:55,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:56,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:57,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:58,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{7:60,9:61,17:13,21:[1,62],22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,40:59},{38:[1,63]},{4:64,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,21:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:$V6,34:[1,65],36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb},{20:66,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{21:[1,67]},o($Vo,[2,15],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC}),{20:82,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},o($VD,[2,64],{43:[1,84],44:[1,83]}),{20:85,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VD,[2,63]),{30:[1,86],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},{30:[1,87],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},{30:[1,88],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},{30:[1,89],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},{8:[1,90]},{8:[2,33]},{8:[2,34]},{19:$Vd},{29:[1,91]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,21:$V0,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:$V6,34:[1,92],36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb},o($VE,[2,25]),{8:[2,14],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},o($Vf,[2,21]),{20:93,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:94,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:95,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:96,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:97,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:98,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:99,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:100,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:101,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:102,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:103,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:104,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:105,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:106,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},o($VF,[2,40],{45:$Vp}),o($VD,[2,41]),o($VD,[2,42]),o($VG,[2,57],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),{31:107,33:$Ve},{8:[1,108]},{8:[1,109]},{31:110,33:$Ve},{20:111,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},{20:112,21:$Vg,45:$Vh,59:$Vi,60:49,61:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn},o($VE,[2,24]),o([8,30,46,51,52,53,54,55,56,57,58],[2,43],{45:$Vp,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VF,[2,44],{45:$Vp}),o($VH,[2,45],{45:$Vp,49:$Vt,50:$Vu}),o($VH,[2,46],{45:$Vp,49:$Vt,50:$Vu}),o($VF,[2,47],{45:$Vp}),o($VF,[2,48],{45:$Vp}),o($VI,[2,49],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VI,[2,50],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VI,[2,51],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VI,[2,52],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VI,[2,53],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VI,[2,54],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu}),o($VG,[2,55],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o([8,30,58],[2,56],{45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB}),o($Vc,[2,28],{32:113,35:[1,114]}),o($Vc,[2,29]),o($Vc,[2,30]),o($Vc,[2,31]),{8:[1,115],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},{30:[1,116],45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC},o($Vc,[2,23]),{10:118,28:$V6,31:117,33:$Ve},{9:121,16:120,21:$V0,41:119},{8:[1,122]},o($Vc,[2,26]),o($Vc,[2,27]),{30:[1,123]},{30:[2,35]},{30:[2,36]},o($Vc,[2,37]),{31:124,33:$Ve},o($Vc,[2,32])],
defaultActions: {21:[2,16],22:[2,17],23:[2,18],24:[2,19],25:[2,20],26:[2,1],60:[2,33],61:[2,34],120:[2,35],121:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
    // author: Luisa María Ortíz Romero 1 semestre 2022
    var tmp = "";
    var num = "";
    const {Declaracion} = require ('../instruction/declaracion.ts');
    const {Type} = require('../symbol/type');
    const {Asignacion} = require('../instruction/asignacion');
    const {Arithmetic} = require('../expressions/aritmeticas');
    const {ArithmeticOption} = require('../expressions/arithmeticOption');
    const {Literal} = require ('../expressions/literal.ts')
    const {Access} = require('../expressions/access');
    const {Relational} = require ('../expressions/relacionales')
    const {RelationalOption} = require('../expressions/relationalOption')
    const {Logic} = require('../expressions/logicas')
    const {LogicOption} = require('../expressions/logicOption')
    const {If} = require('../instruction/if')
    const {Statement} = require('../instruction/statement');
    const {Print} = require('../instruction/print')
    const {Println} = require('../instruction/println')
    const {While} = require('../instruction/while')
    const {For} = require('../instruction/for')
    const {IncreDecre} = require('../expressions/increDecre')
    const {IncreDecreOption} = require('../expressions/increDecreOption')
    const {DoWhile} = require('../instruction/dowhile')
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                    this.begin('cadena')
                
break;
case 1:
                    tmp= tmp +  yy_.yytext;
                
break;
case 2:
                    tmp= tmp +  yy_.yytext;
                
break;
case 3:
                    
                    this.popState();
                    console.log("reconoci token <cadena> con lexema: "+tmp)
                    yy_.yytext=tmp;
                    tmp=""
                    return 65
                    
                    //return 'ER_cadena'
                
break;
case 4:/* skip whitespace */
break;
case 5:// comentario simple línea
break;
case 6:// comentario multiple líneas
break;
case 7:return 63
break;
case 8:return 64
break;
case 9:return 43
break;
case 10:return 44
break;
case 11:return 56
break;
case 12:return 27
break;
case 13:return 51
break;
case 14:return 19
break;
case 15:return 8
break;
case 16:return 27
break;
case 17:return 29
break;
case 18:return 30
break;
case 19:return 33
break;
case 20:return 34
break;
case 21:return 46
break;
case 22:return 45
break;
case 23:return 47
break;
case 24:return 48
break;
case 25:return 49
break;
case 26:return 50
break;
case 27:return 52
break;
case 28:return 53
break;
case 29:return 54
break;
case 30:return 55
break;
case 31:return 58
break;
case 32:return 57
break;
case 33:return 59
break;
case 34:return 22
break;
case 35:return 23
break;
case 36:return 24
break;
case 37:return 25
break;
case 38:return 26
break;
case 39:return 28
break;
case 40:return 35
break;
case 41:return 36
break;
case 42:return 37
break;
case 43:return 38
break;
case 44:return 39
break;
case 45:return 42
break;
case 46:return 21
break;
case 47:return 62
break;
case 48:return 61
break;
case 49:
break;
case 50:
break;
case 51:return 5; 
break;
case 52: 
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                    
break;
}
},
rules: [/^(?:["])/i,/^(?:\\")/i,/^(?:[^"])/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(true|false\b))/i,/^(?:('(\\'|[^\'^\\^\"]|\\\\|\\n|\\t|\\r|\\")'))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"numeros":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true},"cadena":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}