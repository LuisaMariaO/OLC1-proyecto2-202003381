/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[5,26,27,28,29,30,31,33,39,41,42,43,44,47,52],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,47],$Vi=[26,38],$Vj=[8,24,32],$Vk=[1,54],$Vl=[1,53],$Vm=[1,55],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[8,35],$Vt=[1,82],$Vu=[1,81],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[8,32,35,55,56,57,58,59,60,61,62,63,64,65,66,67,68],$VI=[1,101],$VJ=[32,35],$VK=[5,26,27,28,29,30,31,33,39,40,41,42,43,44,47,52],$VL=[8,32,35,56,57,58,59,60,61,62,63,64,65,66,67,68],$VM=[8,32,35,67,68],$VN=[8,32,35,56,57,58,61,62,63,64,65,66,67,68],$VO=[8,32,35,61,62,63,64,65,66,67,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,";":8,"ASIGNACION":9,"IF":10,"PRINT":11,"PRINTLN":12,"WHILE":13,"FOR":14,"DOWHILE":15,"INCREDECRE":16,"FUNCION":17,"CALL":18,"RUN":19,"IRETURN":20,"treturn":21,"TIPO":22,"VARIABLES":23,"=":24,"EXPRESION":25,"id":26,"tint":27,"tdouble":28,"tboolean":29,"tchar":30,"tstring":31,",":32,"tif":33,"(":34,")":35,"BLOQUE":36,"ELSE":37,"{":38,"}":39,"telse":40,"tprint":41,"tprintln":42,"twhile":43,"tfor":44,"CONDICION":45,"ITERADOR":46,"tdo":47,":":48,"tvoid":49,"PARAMETROS":50,"CALLPARAMETROS":51,"trun":52,"++":53,"--":54,"-":55,"+":56,"*":57,"/":58,"^":59,"%":60,"==":61,"!=":62,"<":63,"<=":64,">":65,">=":66,"&&":67,"||":68,"!":69,"L":70,"int":71,"double":72,"boolean":73,"char":74,"string":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",21:"treturn",24:"=",26:"id",27:"tint",28:"tdouble",29:"tboolean",30:"tchar",31:"tstring",32:",",33:"tif",34:"(",35:")",38:"{",39:"}",40:"telse",41:"tprint",42:"tprintln",43:"twhile",44:"tfor",47:"tdo",48:":",49:"tvoid",52:"trun",53:"++",54:"--",55:"-",56:"+",57:"*",58:"/",59:"^",60:"%",61:"==",62:"!=",63:"<",64:"<=",65:">",66:">=",67:"&&",68:"||",69:"!",71:"int",72:"double",73:"boolean",74:"char",75:"string"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[20,1],[7,2],[7,4],[9,3],[22,1],[22,1],[22,1],[22,1],[22,1],[23,3],[23,1],[10,6],[36,3],[36,2],[37,2],[37,2],[37,0],[11,5],[12,5],[13,5],[14,9],[45,1],[45,1],[46,1],[46,1],[15,7],[17,6],[17,4],[17,7],[17,5],[17,6],[17,7],[18,4],[18,5],[50,4],[50,2],[51,3],[51,1],[19,2],[16,2],[16,2],[25,2],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4: case 5: case 12:
 this.$=$$[$0-1]; 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 37: case 38: case 39: case 40:
 this.$=$$[$0]; 
break;
case 17:
 this.$= new Declaracion($$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 18:
 this.$= new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 19:
this.$= new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 25:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 26:
 this.$ = [$$[$0]];             
break;
case 27:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 28:
 this.$ = new Statement($$[$0-1]         , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 29:
 this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 30: case 31:
 this.$ = $$[$0];   
break;
case 32:
 this.$ = null; 
break;
case 33:
 this.$ = new Print($$[$0-2]         , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 34:
 this.$ = new Println($$[$0-2]         , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 35:
 this.$ = new While($$[$0-2],$$[$0]        , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 36:
 this.$=new For($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );   
break;
case 41:
 this.$ = new DoWhile($$[$0-2],$$[$0-5]        , _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 42:
 this.$ = new Funcion($$[$0-5], $$[$0], [], "void", _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 43:
 this.$ = new Funcion($$[$0-3], $$[$0], [], "void", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 44:
 this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], "void", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 45:
 this.$ = new Funcion($$[$0-4], $$[$0], $$[$0-2], "void", _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 46:
 this.$ = new Funcion($$[$0-5], $$[$0-2], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 47:
 this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 48:
 this.$ = new Call($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 49:
 this.$ = new Call($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);  
break;
case 50:
 $$[$0-3].push($$[$0]+","+$$[$0-1]); this.$ = $$[$0-3];  
break;
case 51:
 this.$ = [$$[$0]+","+$$[$0-1]];             
break;
case 52:
    $$[$0-2].push($$[$0]);    this.$ = $$[$0-2];   
break;
case 53:
    this.$ = [$$[$0]];                 
break;
case 54:
 this.$ = new Run($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);  
break;
case 55: case 59:
 this.$= new IncreDecre(IncreDecreOption.INCREMENTO,$$[$0-1],_$[$0-1].first_line,_$[$0].first_column); 
break;
case 56: case 58:
 this.$= new IncreDecre(IncreDecreOption.DECREMENTO,$$[$0-1],_$[$0-1].first_line,_$[$0].first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.NEGACION,        _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.SUMA            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 61:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.RESTA            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MULTIPLICACION            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIVISION            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POTENCIA            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.IGUAL          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.DIFERENTE     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENOR         , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 69:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENORIGUAL     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 70:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYOR          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 71:
 this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYORIGUAL , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 72:
 this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 73:
 this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 74:
 this.$ = new Logic($$[$0], $$[$0],LogicOption.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 75:
  this.$ = $$[$0]; 
break;
case 76:
  this.$ = new Literal($$[$0],                   Type.INTEGER , _$[$0].first_line, _$[$0].first_column); 
break;
case 77:
  this.$ = new Literal($$[$0],                   Type.DOUBLE , _$[$0].first_line, _$[$0].first_column); 
break;
case 78:
  this.$ = new Literal($$[$0],                   Type.BOOLEAN , _$[$0].first_line, _$[$0].first_column); 
break;
case 79:
  this.$ = new Literal($$[$0],                   Type.CHAR , _$[$0].first_line, _$[$0].first_column); 
break;
case 80:
  this.$ = new Literal($$[$0],                   Type.STRING , _$[$0].first_line, _$[$0].first_column); 
break;
case 81:
  this.$ = new Access($$[$0],_$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,22:16,26:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,33:$V6,41:$V7,42:$V8,43:$V9,44:$Va,47:$Vb,52:$Vc},{1:[3]},{5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,22:16,26:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,33:$V6,41:$V7,42:$V8,43:$V9,44:$Va,47:$Vb,52:$Vc},o($Vd,[2,3]),{8:[1,32]},{8:[1,33]},o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),{8:[1,34]},o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),{23:35,26:[1,36]},{24:$Ve,34:[1,40],53:$Vf,54:$Vg},{34:[1,41]},{34:[1,42]},{34:[1,43]},{34:[1,44]},{34:[1,45]},{36:46,38:$Vh},{18:48,26:[1,49]},o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,12]),{8:[2,17],24:[1,50],32:[1,51]},o($Vj,[2,26]),{25:52,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($Vs,[2,55]),o($Vs,[2,56]),{22:65,25:66,26:$Vk,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,35:[1,62],50:63,51:64,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:67,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:68,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:69,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:70,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{7:72,9:73,22:16,26:[1,74],27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,45:71},{43:[1,75]},{4:76,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,22:16,26:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,33:$V6,39:[1,77],41:$V7,42:$V8,43:$V9,44:$Va,47:$Vb,52:$Vc},o($Vd,[2,54]),{34:[1,78]},{25:79,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{26:[1,80]},o($Vs,[2,19],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),{25:95,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VH,[2,81],{53:[1,97],54:[1,96]}),{25:98,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VH,[2,75]),o($VH,[2,76]),o($VH,[2,77]),o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),{8:$VI,36:100,38:$Vh,48:[1,99]},{32:[1,103],35:[1,102]},{32:[1,105],35:[1,104]},{26:[1,106]},o($VJ,[2,53],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),{35:[1,107],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{35:[1,108],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{35:[1,109],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{35:[1,110],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{8:[1,111]},{8:[2,37]},{8:[2,38]},{24:$Ve},{34:[1,112]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,22:16,26:$V0,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,33:$V6,39:[1,113],41:$V7,42:$V8,43:$V9,44:$Va,47:$Vb,52:$Vc},o($VK,[2,29]),{25:66,26:$Vk,35:[1,114],51:64,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{8:[2,18],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},o($Vj,[2,25]),{25:115,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:116,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:117,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:118,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:119,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:120,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:121,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:122,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:123,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:124,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:125,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:126,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:127,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:128,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VL,[2,57],{55:$Vt}),o($VH,[2,58]),o($VH,[2,59]),o($VM,[2,74],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE}),{22:130,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,49:[1,129]},o($Vd,[2,43]),o($Vd,[2,48]),{36:132,38:$Vh,48:[1,131]},{22:133,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5},{8:[1,134]},{25:135,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VJ,[2,51]),{36:136,38:$Vh},{8:[1,137]},{8:[1,138]},{36:139,38:$Vh},{25:140,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{25:141,26:$Vk,55:$Vl,69:$Vm,70:56,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VK,[2,28]),{8:$VI},o([8,32,35,56,61,62,63,64,65,66,67,68],[2,60],{55:$Vt,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VL,[2,61],{55:$Vt}),o($VN,[2,62],{55:$Vt,59:$Vx,60:$Vy}),o($VN,[2,63],{55:$Vt,59:$Vx,60:$Vy}),o($VL,[2,64],{55:$Vt}),o($VL,[2,65],{55:$Vt}),o($VO,[2,66],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VO,[2,67],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VO,[2,68],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VO,[2,69],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VO,[2,70],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VO,[2,71],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VM,[2,72],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE}),o([8,32,35,68],[2,73],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF}),{36:142,38:$Vh},{36:143,38:$Vh},{22:145,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,49:[1,144]},o($Vd,[2,45]),{26:[1,146]},o($Vd,[2,49]),o($VJ,[2,52],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vd,[2,32],{37:147,40:[1,148]}),o($Vd,[2,33]),o($Vd,[2,34]),o($Vd,[2,35]),{8:[1,149],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{35:[1,150],55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},o($Vd,[2,42]),o($Vd,[2,46]),{36:151,38:$Vh},{36:152,38:$Vh},o($VJ,[2,50]),o($Vd,[2,27]),{10:154,33:$V6,36:153,38:$Vh},{9:157,16:156,26:[1,158],46:155},{8:[1,159]},o($Vd,[2,44]),o($Vd,[2,47]),o($Vd,[2,30]),o($Vd,[2,31]),{35:[1,160]},{35:[2,39]},{35:[2,40]},{24:$Ve,53:$Vf,54:$Vg},o($Vd,[2,41]),{36:161,38:$Vh},o($Vd,[2,36])],
defaultActions: {30:[2,1],72:[2,37],73:[2,38],156:[2,39],157:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
    // author: Luisa María Ortíz Romero 1 semestre 2022
    var tmp = "";
    var num = "";
    const {Declaracion} = require ('../instruction/declaracion.ts');
    const {Type} = require('../symbol/type');
    const {Asignacion} = require('../instruction/asignacion');
    const {Arithmetic} = require('../expressions/aritmeticas');
    const {ArithmeticOption} = require('../expressions/arithmeticOption');
    const {Literal} = require ('../expressions/literal.ts')
    const {Access} = require('../expressions/access');
    const {Relational} = require ('../expressions/relacionales')
    const {RelationalOption} = require('../expressions/relationalOption')
    const {Logic} = require('../expressions/logicas')
    const {LogicOption} = require('../expressions/logicOption')
    const {If} = require('../instruction/if')
    const {Statement} = require('../instruction/statement');
    const {Print} = require('../instruction/print')
    const {Println} = require('../instruction/println')
    const {While} = require('../instruction/while')
    const {For} = require('../instruction/for')
    const {IncreDecre} = require('../expressions/increDecre')
    const {IncreDecreOption} = require('../expressions/increDecreOption')
    const {DoWhile} = require('../instruction/dowhile')
    const {Funcion} = require('../instruction/funcion')
    const {Call} = require('../instruction/call')
    const {Run} = require('../instruction/run')
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                    this.begin('cadena')
                
break;
case 1:
                    tmp= tmp +  yy_.yytext;
                
break;
case 2:
                    tmp= tmp +  yy_.yytext;
                
break;
case 3:
                    
                    this.popState();
                    console.log("reconoci token <cadena> con lexema: "+tmp)
                    yy_.yytext=tmp;
                    tmp=""
                    return 75
                    
                    //return 'ER_cadena'
                
break;
case 4:/* skip whitespace */
break;
case 5:// comentario simple línea
break;
case 6:// comentario multiple líneas
break;
case 7:return 73
break;
case 8:return 74
break;
case 9:return 53
break;
case 10:return 54
break;
case 11:return 66
break;
case 12:return 32
break;
case 13:return 61
break;
case 14:return 24
break;
case 15:return 8
break;
case 16:return 48
break;
case 17:return 32
break;
case 18:return 34
break;
case 19:return 35
break;
case 20:return 38
break;
case 21:return 39
break;
case 22:return 56
break;
case 23:return 55
break;
case 24:return 57
break;
case 25:return 58
break;
case 26:return 59
break;
case 27:return 60
break;
case 28:return 62
break;
case 29:return 63
break;
case 30:return 64
break;
case 31:return 65
break;
case 32:return 68
break;
case 33:return 67
break;
case 34:return 69
break;
case 35:return 27
break;
case 36:return 28
break;
case 37:return 29
break;
case 38:return 30
break;
case 39:return 31
break;
case 40:return 33
break;
case 41:return 40
break;
case 42:return 41
break;
case 43:return 42
break;
case 44:return 43
break;
case 45:return 44
break;
case 46:return 47
break;
case 47:return 49
break;
case 48:return  'treturn'
break;
case 49:return 52
break;
case 50:return 26
break;
case 51:return 72
break;
case 52:return 71
break;
case 53:
break;
case 54:
break;
case 55:return 5; 
break;
case 56: 
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                    
break;
}
},
rules: [/^(?:["])/i,/^(?:\\")/i,/^(?:[^"])/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(true|false\b))/i,/^(?:('(\\'|[^\'^\\^\"]|\\\\|\\n|\\t|\\r|\\")'))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:run\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"numeros":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true},"cadena":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}